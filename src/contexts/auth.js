/* AQUI √â ONDE FAREMOS TODO O CONTROLE DO NOSSO SISTEMA DE AUTENTICA√á√ÉO */

/* 
Ordena√ß√£o: 0Ô∏è‚É£1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£5Ô∏è‚É£6Ô∏è‚É£7Ô∏è‚É£8Ô∏è‚É£9Ô∏è‚É£üîü
A fazer: ‚ù§Ô∏è
Arrumar: ‚ö†Ô∏è
Conclu√≠do: ‚úÖ
*/

/* 0Ô∏è‚É£ IMPORTS */
import {
  useState,
  createContext,
  useEffect,
} from "react"; /* A fun√ß√£o "useState" √© usada para adicionar estado a um componente React, a fun√ß√£o "createContext" √© usada para criar um objeto de contexto que pode ser compartilhado entre componentes e a fun√ß√£o "useEffect" √© usada para executar efeitos colaterais em um componente React, como buscar dados de uma API ou atualizar o t√≠tulo da p√°gina. */
import {
  auth,
  db,
} from "../services/firebaseConnection"; /* 'auth' para fazermos a autentica√ß√£o + 'db' para acessar/manipular o banco de dados */
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
} from "firebase/auth"; /* trazendo o m√©todo que permite criar um usu√°rio com email e senha (que n√≥s ativamos no firebase quando criamos o App) + o M√©todo de logar com e-mail e senha */
import {
  doc,
  getDoc,
  setDoc,
} from "firebase/firestore"; /* 'doc' para acessar os documentos + 'getDoc' para poder pegar documentos + 'setDoc' para poder criar algum documento/ passar algum dado dentro de algum documento no banco de dados  */

import { useNavigate } from "react-router-dom"; /* Navegar o usu√°rio entre as p√°ginas */

import { toast } from "react-toastify"; /* Necess√°rio p/ EFEITO exibir PopUps/ Alertas personalizados */

/* 1Ô∏è‚É£ VARI√ÅVEIS */
export const AuthContext = createContext(
  {}
); /* aqui n√≥s criamos a variavel e exportamos ela ao mesmo tempo, para que outros arquivos possam utilizar este contexto */

/* 2Ô∏è‚É£ FUN√á√ïES */

/* 2Ô∏è‚É£.1Ô∏è‚É£ (‚úÖ) Fun√ß√£o que cria o provedor de contexto (AuthProvider)
(que √© onde ter√£o os m√©todos de 'login', 'cadastro' e tudo que for l√≥gica) */
function AuthProvider({ children }) {
  const [user, setUser] = useState(null); /* Informa√ß√µes do state User */
  const [loadingAuth, setloadingAuth] =
    useState(
      false
    ); /* Para controlarmos quando o usu√°rio clicar em cadastrar, caso demore, mostraremos um spin girando */
  const [loading, setLoading] =
    useState(true); /* Cria um useState para controlar o loading */
  const navigate = useNavigate(); /* Cria a variavel de navega√ß√£o */

  /* Toda vez que nossa aplica√ß√£o abrir ele vai passar por este useEffect */
  useEffect(() => {
    async function loadUser() {
      /* Busca no LocalStorage pra ver se tem alguma coisa */
      const storageUser = localStorage.getItem("@ticketsPRO");

      if (storageUser) {
        /* Se achar algum Cookie localStorage com informa√ß√µes do usu√°rio */
        setUser(
          JSON.parse(storageUser)
        ); /* Converte os dados do usu√°rio de volta para um objeto  JSON */
        setLoading(false);
      }
      /* Caso N√ÉO cair no if, muda o setLoading pra falso tamb√©m */
      setLoading(false);
    }

    loadUser(); /* Executa a fun√ß√£o useEffect acima */
  }, []);

  /* 2Ô∏è‚É£.2Ô∏è‚É£ (‚ö†Ô∏è) Fun√ß√£o de LOGIN ass√≠ncrona (pois pode DEMORAR UM POUQUINHO) */
  async function signIn(email, password) {
    setloadingAuth(true);

    /* Loga o usu√°rio */
    await signInWithEmailAndPassword(auth, email, password)
      .then(async (value) => {
        let uid =
          value.user.uid; /* Obt√©m o UID do usu√°rio que acabou ded logar */

        const docRef = doc(db, "users", uid); /* Aceesando o banco de dados */
        const docSnap = await getDoc(docRef); /* Snap se refere ao retorno */

        /* Montando nosso objeto */
        let data = {
          uid: uid,
          nome: docSnap.data().nome,
          email: value.user.email,
          avatarUrl: docSnap.data().avatarUrl,
        };

        setUser(
          data
        ); /* Configura o usu√°rio atual com os dados obtidos em 'data' */
        storageUser(
          data
        ); /* Envia os dados do usu√°rio atual para o banco de dados (storageUser) */
        setloadingAuth(false);
        toast.success(`Bem vindo(a) de volta!`); /* Exibe um popUp de sucesso */
        navigate("/dashboard"); /* Navega o usu√°rio at√© a p√°gina '/dashboard' */
      }) /* Caso der algum ERRO: */

      .catch((error) => {
        console.log("ERRO:\n", "-> ", error.toString());
        setloadingAuth(false);
        /* Tratamento dos tipos de erros */
        if (error.code === "auth/wrong-password") {
          /* ERRO: Senha incorreta */
          toast.error("Senha incorreta.");
        } else if (error.code === "auth/user-not-found") {
          /* ERRO: Usu√°rio n√£o encontrado */
          toast.error("Usu√°rio n√£o encontrado.");
        } else if (error.code === "auth/invalid-email") {
          /* ERRO: e-mail inv√°lido */
          toast.error("E-mail inv√°lido");
        } else if (error.code === "auth/weak-password") {
          /* ERRO: Senha fraca fornecida. */
          toast.error("A senha deve ter no m√≠nimo 6 caracteres.");
        } else if (error.code === "auth/network-request-failed") {
          /* ERRO: Falta de conex√£o com a internet */
          toast.error("Erro de conex√£o. Verifique sua conex√£o com a internet.");
        } else if (error.code === "auth/user-disabled") {
          /* ERRO: Conta desativada */
          toast.error("Esta conta de usu√°rio foi desativada.");
        } else if (error.code === "auth/operation-not-allowed") {
          /* ERRO: Opera√ß√£o n√£o permitida */
          toast.error(
            "Opera√ß√£o n√£o permitida. Entre em contato com o suporte."
          );
        } else if (error.code === "auth/too-many-requests") {
          /* ERRO: Conta temporariamente bloqueada (muitas tentativas sem sucesso) */
          toast.warning(
            "Sua conta foi temporariamente bloqueada. Redefina a senha ou tente novamente mais tarde."
          );
        } else {
          /* Demais erros */
          toast.error(
            "Ops, algo deu errado! Tente novamente."
          ); /* Exibe um popUp de erro gen√©rico para outros erros de autentica√ß√£o */
        }
      });
  }

  /* 2Ô∏è‚É£.3Ô∏è‚É£ (‚úÖ) Fun√ß√£o de CADASTRO ass√≠ncrona (pois o cadastro pode demorar um pouco) - novo usu√°rio */
  async function signUp(nome_profissional, email, password) {
    /* Quando o usu√°rio clicar no bot√£o 'Cadastre-se', n√≥s queremos que...
    ...PASSO 01: Passar o 'setloadingAuth' para true.
    OBS: Fazendo isso, n√≥s informamos que agora n√≥s estamos fazendo o cadastro*/
    setloadingAuth(true); /* Para iniciar a anmima√ß√£o do spinner (carregando) */

    /* PASSO 2: 'await' -> Aguarda a cria√ß√£o do usu√°rio */
    await createUserWithEmailAndPassword(auth, email, password)
      /* '.then' -> Ent√£o, fa√ßa alguma coisa quando der tudo certo (neste caso, de forma ass√≠ncrona, 
        ...vamos abrir uma fun√ß√£o an√¥nima,que recebe value ('value' -> S√£o as informa√ß√µes do usu√°rio: 
        ...ID, email...Enfim, tudo o que vem de retorno, quando conclui o cadastro do usu√°rio com sucesso)) */
      .then(async (value) => {
        /* PASSO 3: Acessar o 'db' e Salvar: Nome(uid), Foto de Perfil, etc */
        /* P/ ACESSAR AS INFO. DO USU√ÅRIO, USE -> let uid = value.user. */
        let uid = value.user.uid; /* Obt√©m o UID do usu√°rio */

        /* PASSO 4: Cria (no db) uma cole√ß√£o de users, e dentro cria um documento 'uid' com as informa√ß√µes de cada usu√°rio, ex: "users > user123 > infos user123" */
        await setDoc(doc(db, "users", uid), {
          /* AQUI informamos o que trazer para o banco de dados */
          nome: nome_profissional /* Pega o nome do profissional */,
          avatarUrl:
            null /* Quando cadastra o usu√°rio, ainda n√£o tem foto (por isso, nulo) */,
        })
          /* PASSO 5: Quando cadastrar as informa√ß√µes acima no nosso banco (db), fa√ßa... */
          .then(() => {
            /* alert("Cadastrado com sucesso =D"); */
            /* PASSO 6: Criar objeto com as informa√ß√µes do usu√°rio */
            let data = {
              uid: uid,
              nome: nome_profissional,
              email: value.user.email,
              avatarUrl: null,
            };

            /* PASSO 7: Passa as informa√ß√µes armazenadas em data para o 'setUser' ("Configurador de Usu√°rio") */
            setUser(data);

            /* Salva no Local Storage */
            storageUser(data);

            /* O cadastro j√° terminou? Ent√£o... */
            setloadingAuth(
              false
            ); /* PASSO 1: Pausa a anima√ß√£o do spinner (carregando)*/
            navigate(
              "/dashboard"
            ); /* PASSO 2: Define o endpoint para onde o usu√°rio ser√° direcionado ap√≥s a conclus√£o do cadastro + Navega o usu√°rio para a p√°g. '/Dashboard' */

            /* Exibe PopUp de Sucesso (da TostiFy) com o nome do profissional */
            toast.success(`Seja bem-vindo(a), ${nome_profissional}!`, {
              className: "custom-toast-success",
              progressClassName: "custom-toast-progress-bar",
            });
          });
      })
      /* (.catch(error)) CAPTURA O ERRO (caso haja): */
      .catch((error) => {
        console.log(error); /* Mostra qual foi o erro */
        setloadingAuth(false); /* Pausa a anima√ß√£o do spinner (carregando)*/

        if (error.code === "auth/email-already-in-use") {
          toast.error(
            "Este e-mail j√° est√° sendo utilizado. Por favor, escolha outro e tente novamente."
          );
          // Outras a√ß√µes espec√≠ficas para o erro "auth/email-already-in-use" podem ser adicionadas aqui
        } else if (error.code === "auth/invalid-email") {
          toast.error("E-mail inv√°lido.");
          // Outras a√ß√µes espec√≠ficas para o erro "auth/email-already-in-use" podem ser adicionadas aqui
        } else if (error.code === "auth/operation-not-allowed") {
          /* ERRO: Opera√ß√£o n√£o permitida */
          toast.error(
            "Opera√ß√£o n√£o permitida. Entre em contato com o suporte."
          );
        } else if (error.code === "auth/weak-password") {
          /* ERRO: Senha fraca fornecida. */
          toast.error("A senha deve ter no m√≠nimo 6 caracteres.");
        } else {
          toast.error(
            "Ocorreu um erro ao cadastrar o usu√°rio. Por favor, tente novamente."
          );
          // A√ß√µes gerais para outros erros podem ser adicionadas aqui
        }
      });

    /* ...PASSO 02: Fazer o cadastro */
  }

  /* 3Ô∏è‚É£ (‚úÖ) Fun√ß√£o para salvar as informa√ß√µes do usu√°rio em Local Storage (Cookies) */
  function storageUser(data) {
    /* '@ticketsPRO' √© o nome da chave que eu escolhi para salvar os dados do usu√°rio */
    localStorage.setItem(
      "@ticketsPRO",
      JSON.stringify(data)
    ); /* No final, passamos o par√¢metro 'data', para salvar no LocalStorage */
  }

  /* Fun√ß√£o de Logout */
  async function logout() {
    /* Aguarda e desloga o usu√°rio */
    await signOut(auth);

    /* Remove os dados armazenados no LocalStorage (Cookies) */
    localStorage.removeItem("@ticketsPRO");

    /* Limpa a useState User, que armazena as informa√ß√µes do usu√°rio atual  */
    setUser(null);
  }

  return (
    /* Aqui √© nosso componente */
    <AuthContext.Provider
      value={{
        signed:
          !!user /* Ao inv√©s de declarar 'false' aqui, colocamos o !!user que converte nossa variavel para boleano,ou seja, ela inicia vazia (como null)... Se tiver alguma coisa nela, ela deixa de ser null e vira true */,
        user,
        signIn /* exporta o m√©todo signIn */,
        signUp /* exporta o m√©todo signUp */,
        logout /* exporta o m√©todo logout */,
        loadingAuth /* exporta o loadingAuth (useSate que estamos controlando) */,
        loading,
        storageUser, /* Exporta a fun√ß√£o que salva os dados do usu√°rio em Cookies */
        setUser, /* Exportando a fun√ß√£o que permite manipular as informa√ß√µes do usu√°rio */
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

/* 4Ô∏è‚É£ (‚úÖ) Exportando o AuthProvider */
export default AuthProvider;
